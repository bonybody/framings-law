openapi: 3.0.0
x-stoplight:
  id: 9draj2825l5yc
info:
  title: swagger
  version: '1.0'
  description: ''
host: 'localhost:3000'
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
paths:
  /rooms/:
    post:
      summary: ルームの作成
      operationId: post-rooms
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoomCreateResponse'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
      description: 新しくゲームのルームを作成する。
      tags:
        - Room
      security:
        - authorization: []
  '/rooms/{roomId}/joins':
    parameters:
      - type: string
        name: roomId
        in: path
        required: true
    post:
      summary: ルームに参加
      operationId: post-rooms-roomId-join
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomJoinUsers'
      description: ''
      tags:
        - Room
      parameters: []
      security:
        - authorization: []
    get:
      summary: ''
      operationId: get-rooms-roomId-join
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomJoinUsers'
      tags:
        - Room
  '/rooms/{roomId}/readies':
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-rooms-roomId-ready
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomReadyUsers'
      security:
        - authorization: []
      tags:
        - Room
    get:
      summary: ''
      operationId: get-rooms-roomId-ready
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomReadyUsers'
      tags:
        - Room
  '/rooms/{roomId}/users':
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - Room
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomUsers'
      operationId: get-rooms-roomId-users
  /games/:
    post:
      summary: Create Game
      operationId: post-games
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
      description: 新しくゲームを作成する。
      tags:
        - Game
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  type: string
  '/games/{gameId}':
    parameters:
      - type: string
        name: gameId
        in: path
        required: true
    get:
      summary: 特定のゲームの状態を取得する
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
      operationId: get-games-gameId
      description: '{gameId}で指定されたゲームの状態を取得する。'
      tags:
        - Game
  '/games/{gameId}/health-check':
    parameters:
      - schema:
          type: string
        name: gameId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-games-gameId-health-check
      responses:
        '200':
          description: OK
  '/games/{gameId}/cards':
    parameters:
      - type: string
        name: gameId
        in: path
        required: true
    get:
      summary: ゲーム内の投稿一覧取得
      tags:
        - Game
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/GameCard'
      operationId: get-games-gameId-posts
      description: |-
        {gameId}で指定されたゲーム内の投稿を一覧取得する。
        削除された投稿は除外して取得する。
      parameters:
        - schema:
            type: boolean
          in: query
          name: is_framing
        - schema:
            type: boolean
          in: query
          name: is_deleted
      security:
        - authorization: []
  '/games/{gameId}/cards/{cardId}':
    parameters:
      - schema:
          type: string
        name: gameId
        in: path
        required: true
      - schema:
          type: string
        name: cardId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  card:
                    $ref: '#/components/schemas/GameCard'
      operationId: get-games-gameId-cards-cardId
      security:
        - authorization: []
  '/games/{gameId}/players':
    parameters:
      - schema:
          type: string
        name: gameId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - Game
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  players:
                    type: array
                    items:
                      $ref: '#/components/schemas/GamePlayer'
      operationId: get-games-gameId-users
      security:
        - authorization: []
  '/games/{gameId}/players/me':
    parameters:
      - schema:
          type: string
        name: gameId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  player:
                    $ref: '#/components/schemas/GamePlayer'
      operationId: get-games-gameId-players-me
      security:
        - authorization: []
  '/games/{gameId}/players/{playerId}':
    parameters:
      - schema:
          type: string
        name: gameId
        in: path
        required: true
      - schema:
          type: string
        name: playerId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - Game
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  player:
                    $ref: '#/components/schemas/GamePlayer'
      operationId: get-games-gameId-players-playerId
      security:
        - authorization: []
  '/games/{gameId}/vote':
    parameters:
      - schema:
          type: string
        name: gameId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-games-gameId-vote
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gameCardId:
                  type: string
definitions:
  User:
    title: User
    type: object
    properties:
      id:
        type: integer
        description: Unique identifier for the given user.
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
      dateOfBirth:
        type: string
        format: date
        example: '1997-10-31'
      emailVerified:
        type: boolean
        description: Set to true if the user's email has been verified.
      createDate:
        type: string
        format: date
        description: The date that the user was created.
    required:
      - id
      - firstName
      - lastName
      - email
      - emailVerified
  RoomCreateRequest:
    title: RoomCreateRequest
    x-stoplight:
      id: q5teckcdor4jn
    type: object
    properties:
      authorId:
        type: string
  RoomCreateResponse:
    title: RoomCreateResponse
    x-stoplight:
      id: 73k591vwelixr
    type: object
    properties:
      id:
        type: string
  RoomJoinRequest:
    title: RoomJoinRequest
    x-stoplight:
      id: dgitzx0op0stj
    type: object
    properties:
      id:
        type: string
securityDefinitions:
  Authorization:
    name: Authorization
    type: apiKey
    in: header
servers:
  - description: ''
    url: 'http://localhost:3000/'
components:
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
      description: ''
  responses: {}
  schemas:
    Room:
      type: object
      title: Room
      x-stoplight:
        id: 4xht9vfhlqxj0
      properties:
        id:
          type: string
        hostUserId:
          type: string
        cardCount:
          type: number
        debateSeconds:
          type: number
        key:
          type: string
        status:
          type: object
          properties:
            id:
              type: string
            code:
              type: string
    RoomUsers:
      title: RoomUser
      x-stoplight:
        id: fzxcktazmlrjt
      type: object
      properties:
        join:
          type: array
          items:
            type: string
        ready:
          type: array
          items:
            type: string
    RoomJoinUsers:
      title: RoomJoinUsers
      x-stoplight:
        id: v7ogsfd0ihl3n
      type: object
      properties:
        users:
          type: array
          items:
            type: string
    RoomReadyUsers:
      title: RoomReadyUsers
      x-stoplight:
        id: ucv4ny2ar8u2w
      type: object
      properties:
        users:
          type: array
          items:
            type: string
    GamePlayer:
      title: GamePlayer
      x-stoplight:
        id: nwdk5sktjysqx
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        gameId:
          type: string
        isFramer:
          type: boolean
        character:
          type: object
          properties:
            id:
              type: string
            displayName:
              type: string
            imageUrl:
              type: string
    GameCard:
      title: GameCard
      x-stoplight:
        id: ut9sfnme35ant
      type: object
      properties:
        id:
          type: string
        gameId:
          type: string
        card:
          type: object
          properties:
            id:
              type: string
            postedAt:
              type: string
            body:
              type: string
            commentary:
              type: string
            isFraming:
              type: boolean
        isDeleted:
          type: boolean
    Game:
      title: Game
      x-stoplight:
        id: drxq2nvw3khjb
      type: object
      properties:
        turn:
          type: number
        phase:
          type: string
security:
  - authorization: []
